buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "net.ltgt.gradle:gradle-errorprone-plugin:0.0.16"
    }
}

plugins {
    id "com.avast.gradle.docker-compose" version "0.7.1"
}

defaultTasks 'check'

task wrapper(type: Wrapper) {
    gradleVersion = '4.10'
}

ext.junitJupiterVersion  = '5.2.0'

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'java-library'
    apply plugin: 'jacoco'
}

subprojects {

    sourceCompatibility = 1.8

    apply plugin: "net.ltgt.errorprone"
    apply plugin: 'pmd'
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'
    apply plugin: 'maven'
    apply plugin: 'signing'

    checkstyle {
        configFile = rootProject.file('gradle/config/checkstyle/checkstyle.xml')
        toolVersion = '8.5'
    }

    ext.libraries = [
            slf4j   : 'org.slf4j:slf4j-api:1.7.25',
            assertj : 'org.assertj:assertj-core:3.11.0',
            mockito : 'org.mockito:mockito-core:2.21.0',
            guava   : 'com.google.guava:guava:26.0-jre',
            logback : 'ch.qos.logback:logback-classic:1.2.3',
            findbugs: 'com.google.code.findbugs:jsr305:3.0.2'
    ]

    test {
        useJUnitPlatform()
    }

    dependencies {

        test.useJUnitPlatform()

//        testRuntime("org.junit.platform:junit-platform-launcher:1.2.0")
//        testCompile("junit:junit:4.12")
//        testRuntime("org.junit.vintage:junit-vintage-engine:4.12.0")
//        testRuntimeOnly "org.junit.vintage:junit-vintage-engine:4.12.0"

        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"

        // To avoid compiler warnings about @API annotations in JUnit code
       	testCompileOnly('org.apiguardian:apiguardian-api:1.0.0')
    }
    
}

subprojects {

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }
}

ext {
    // Credentials for publication repositories (needed only for publishing)
    // Should be set in ${HOME}/.gradle/gradle.properties
    ossrhUser = project.hasProperty('ossrhUser') ? project.property('ossrhUser') : ""
    osshrPassword = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : ""
}

configure([project(':ratelimitj-redis'), project(':ratelimitj-inmemory'), project(':ratelimitj-core'), project(':ratelimitj-dropwizard')]) {

    apply plugin: 'signing'
    apply plugin: 'maven'

    project.group = 'es.moki.ratelimitj'
    project.version = "${version}"

    // OSSRH publication
    if (ossrhUser != "") {

        // Signature of artifacts
        signing {
            sign configurations.archives
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    // POM signature
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    // Target repository
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUser, password: osshrPassword)
                    }
                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: ossrhUser, password: osshrPassword)
                    }

                    pom.project {
                        name 'es.moki.ratelimitj'
                        description 'The RateLimitJ project aims to provide a modular rate limiting solution'
                        packaging 'jar'
                        url 'https://github.com/mokies/ratelimitj'

                        scm {
                            connection 'scm:git:https://github.com/mokies/ratelimitj.git'
                            developerConnection 'scm:git:git@github.com:mokies/ratelimitj.git'
                            url 'https://github.com/mokies/ratelimitj.git'
                        }

                        licenses {
                            license {
                                name 'Apache License Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'mokies'
                                name = 'Craig Baker'
                            }
                        }
                    }
                }
            }
        }
    } else {
        uploadArchives {
            repositories {
                mavenLocal()
            }
        }
    }

    uploadArchives.dependsOn build
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['es/moki/ratelimitj/test', 'es/moki/ratelimitj/inmemory', 'es/moki/ratelimitj/hazelcast'])
        })
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

// http://nemerosa.ghost.io/2015/07/01/publishing-to-the-maven-central-using-gradle/
// ./gradlew uploadArchives









